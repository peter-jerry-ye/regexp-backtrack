package "yj-qin/regexp"

// Values
fn captures(MatchResult) -> Array[String]

fn compile(String) -> RegExp raise

fn matches(RegExp, String, start~ : Int = .., end? : Int) -> MatchResult

fn named_captures(MatchResult) -> Map[String, String]

fn pattern(RegExp) -> String

fn success(MatchResult) -> Bool

// Types and methods
type MatchResult
fn MatchResult::captures(Self) -> Array[String]
fn MatchResult::named_captures(Self) -> Map[String, String]
fn MatchResult::success(Self) -> Bool
impl Show for MatchResult

pub(all) suberror ParseError {
  InternalParserError
  UnmatchedGroupBegin(pos~ : Int)
  UnmatchedGroupEnd(pos~ : Int)
  UnmatchedGroupName(pos~ : Int)
  EmptyGroupName(pos~ : Int)
  EmptyGroup(pos~ : Int)
  UnmatchedCharClassEnd(pos~ : Int)
  UnspecifiedLoopTarget(pos~ : Int)
  InvalidLoop(pos~ : Int)
  LoopCountOutOfRange(pos~ : Int)
  LoopMaxCountSmallerThanMinCount(pos~ : Int)
  EndPatternAtEscape(pos~ : Int)
  ClassMissingBracket(pos~ : Int)
  GroupMissingParen(pos~ : Int)
}
impl Eq for ParseError
impl Show for ParseError

type RegExp
fn RegExp::matches(Self, String, start~ : Int = .., end? : Int) -> MatchResult
fn RegExp::pattern(Self) -> String

// Type aliases

// Traits

